name: Version Check

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

jobs:
  check-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: base

      - name: Check if package.json version changed
        id: version-check
        run: |
          # 获取 PR 中的版本
          PR_VERSION=$(jq -r .version package.json)
          
          # 获取基础分支的版本
          BASE_VERSION=$(jq -r .version base/package.json)
          
          echo "Base version: $BASE_VERSION"
          echo "PR version: $PR_VERSION"
          
          if [ "$PR_VERSION" != "$BASE_VERSION" ]; then
            echo "✅ Version changed from $BASE_VERSION to $PR_VERSION"
            echo "🚀 This PR will trigger a release when merged!"
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "pr-version=$PR_VERSION" >> $GITHUB_OUTPUT
            echo "base-version=$BASE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Version not changed (still $BASE_VERSION)"
            echo "📝 This PR will NOT trigger a release when merged"
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog from PR
        id: extract-changelog
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            
            console.log('Original PR Body:', prBody);
            
            // 查找 ## Changelog 或 ## 更新日志 部分
            const changelogRegex = /(?:^|\n)##\s*(?:Changelog|更新日志|CHANGELOG)\s*\n([\s\S]*?)(?=\n##|\n---|\n```|$)/i;
            const match = prBody.match(changelogRegex);
            
            let changelog = '';
            if (match && match[1]) {
              changelog = match[1].trim();
              // 清理注释内容
              changelog = changelog.replace(/<!--[\s\S]*?-->/g, '').trim();
              console.log('Changelog after removing comments:', changelog);
            }
            
            // 如果没有找到 changelog 部分，检查是否整个 PR 描述都是 changelog
            if (!changelog && prBody.trim()) {
              // 简单检查：如果包含常见的 changelog 关键词
              const changelogKeywords = ['Feature', 'Fixed', 'Changed', 'Added', 'Removed', 'feat', 'fix', 'add', 'update', 'remove', '新增', '修复', '更新', '删除', '功能', '变更'];
              const hasChangelogKeywords = changelogKeywords.some(keyword => 
                prBody.toLowerCase().includes(keyword.toLowerCase())
              );
              
              if (hasChangelogKeywords) {
                changelog = prBody.trim();
                // 清理注释内容
                changelog = changelog.replace(/<!--[\s\S]*?-->/g, '').trim();
              }
            }
            
            console.log('Final extracted changelog:', changelog);
            
            // 输出到 GitHub Actions
            const fs = require('fs');
            fs.writeFileSync('changelog.txt', changelog);
            
            return { changelog: changelog };

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const versionChanged = '${{ steps.version-check.outputs.version-changed }}' === 'true';
            const prVersion = '${{ steps.version-check.outputs.pr-version }}';
            const baseVersion = '${{ steps.version-check.outputs.base-version }}';
            
            let message;
            if (versionChanged) {
              // 读取提取的 changelog
              const fs = require('fs');
              let changelog = '';
              try {
                changelog = fs.readFileSync('changelog.txt', 'utf8').trim();
              } catch (e) {
                console.log('No changelog file found');
              }
              
              if (changelog) {
                message = `🚀 **Release will be triggered!**
                
                Version will change from \`${baseVersion}\` to \`${prVersion}\` when this PR is merged.
                
                **📝 Changelog detected:**
                \`\`\`
                ${changelog}
                \`\`\`
                
                A new release will be automatically created with tag \`v${prVersion}\` including the above changelog.`;
              } else {
                message = `🚀 **Release will be triggered!**
                
                Version will change from \`${baseVersion}\` to \`${prVersion}\` when this PR is merged.
                
                ⚠️ **No changelog detected** in PR description. Consider adding a \`## Changelog\` section to document your changes.
                
                **How to add changelog:**
                1. Edit this PR description
                2. Add a section like this:
                \`\`\`markdown
                ## Changelog
                
                ### Feature
                - New feature description
                
                ### Fixed
                - Bug fix description
                
                ### Changed
                - Change description
                \`\`\`
                
                A new release will be automatically created with tag \`v${prVersion}\`.`;
              }
            } else {
              message = `📝 **No release will be triggered**
              
              The version in \`package.json\` has not been changed (still \`${baseVersion}\`).
              
              To trigger a release, please update the \`version\` field in \`package.json\`.`;
            }
            
            // 查找已存在的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              (comment.body.includes('Release will be triggered') || 
               comment.body.includes('No release will be triggered'))
            );
            
            if (botComment) {
              // 更新已存在的评论
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
