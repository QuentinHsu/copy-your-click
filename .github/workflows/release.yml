name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  check-version-and-release:
    # 只有当 PR 被合并到 main 分支时才运行
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # 获取前两个提交以比较差异

      - name: Check if package.json version changed
        id: version-check
        run: |
          # 获取当前的 package.json 版本
          CURRENT_VERSION=$(jq -r .version package.json)
          
          # 获取上一个提交的 package.json 版本
          git checkout HEAD~1 -- package.json
          PREVIOUS_VERSION=$(jq -r .version package.json)
          
          # 恢复当前的 package.json
          git checkout HEAD -- package.json
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          # 检查版本是否发生变化
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version not changed, skipping release"
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog from merged PR
        id: extract-changelog
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prBody = context.payload.pull_request.body || '';
            
            // 查找 ## Changelog 或 ## 更新日志 部分
            const changelogRegex = /(?:^|\n)##\s*(?:Changelog|更新日志|CHANGELOG)\s*\n([\s\S]*?)(?=\n##|\n---|\n```|$)/i;
            const match = prBody.match(changelogRegex);
            
            let changelog = '';
            if (match && match[1]) {
              changelog = match[1].trim();
            } else if (prBody.trim()) {
              // 如果没有找到专门的 changelog 部分，使用整个 PR 描述
              const changelogKeywords = ['feat', 'fix', 'add', 'update', 'remove', '新增', '修复', '更新', '删除'];
              const hasChangelogKeywords = changelogKeywords.some(keyword => 
                prBody.toLowerCase().includes(keyword.toLowerCase())
              );
              
              if (hasChangelogKeywords) {
                changelog = prBody.trim();
              }
            }
            
            // 如果仍然没有 changelog，生成一个默认的
            if (!changelog) {
              changelog = `Release v${{ steps.version-check.outputs.new-version }}
              
              Changes merged from PR #${prNumber}`;
            }
            
            console.log('Final changelog:', changelog);
            
            // 保存到文件
            const fs = require('fs');
            fs.writeFileSync('release-changelog.txt', changelog);
            
            return { changelog: changelog };

      - name: Update CHANGELOG.md
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          # 读取当前版本和更新日志
          NEW_VERSION="${{ steps.version-check.outputs.new-version }}"
          CHANGELOG_CONTENT=$(cat release-changelog.txt)
          
          # 创建新的 changelog 条目
          cat > new_changelog_entry.md << 'EOF'
          ## $NEW_VERSION
          
          $CHANGELOG_CONTENT
          
          EOF
          
          # 插入到 CHANGELOG.md 的顶部（在 "# Change Log" 之后）
          if [ -f CHANGELOG.md ]; then
            # 备份原文件
            cp CHANGELOG.md CHANGELOG.md.bak
            
            # 创建新的 CHANGELOG.md
            head -n 3 CHANGELOG.md > temp_changelog.md
            cat new_changelog_entry.md >> temp_changelog.md
            tail -n +4 CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            # 如果不存在 CHANGELOG.md，创建一个新的
            echo "# Change Log" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat new_changelog_entry.md >> CHANGELOG.md
          fi
          
          # 提交更新后的 CHANGELOG.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          
          # 检查是否有变化需要提交
          if git diff --staged --quiet; then
            echo "No changes to CHANGELOG.md"
          else
            git commit -m "docs: update CHANGELOG.md for v${NEW_VERSION}"
            git push
          fi

      - name: Set up Node.js
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 升级到 Node.js 18

      - name: Enable Corepack
        if: steps.version-check.outputs.version-changed == 'true'
        run: corepack enable

      - name: Install pnpm
        if: steps.version-check.outputs.version-changed == 'true'
        run: corepack prepare pnpm@latest --activate

      - name: Install vsce
        if: steps.version-check.outputs.version-changed == 'true'
        run: npm add -g vsce

      - name: Install dependencies
        if: steps.version-check.outputs.version-changed == 'true'
        run: pnpm install

      - name: Compile TypeScript
        if: steps.version-check.outputs.version-changed == 'true'
        run: pnpm run compile

      - name: Package extension
        if: steps.version-check.outputs.version-changed == 'true'
        run: pnpm run build:package

      - name: Upload release asset
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ steps.version-check.outputs.new-version }}.vsix
          path: ./*.vsix

      - name: Create Release
        if: steps.version-check.outputs.version-changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version-check.outputs.new-version }}
          name: Release v${{ steps.version-check.outputs.new-version }}
          body_path: release-changelog.txt
          files: ./*.vsix
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}